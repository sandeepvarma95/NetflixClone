{"version":3,"sources":["Nav.js","axios.js","Requests.js","Banner.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignUpScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/PlansScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","SignUpScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","console","log","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","class","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlansScreen","products","setproducts","collection","where","querySnapshot","forEach","productDoc","loadCheckOut","price","Object","entries","productData","description","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57843db8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Nav.css';\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nfunction Nav() {\r\n\r\nconst [show, handleShow] = useState(false);\r\n\r\nconst history = useHistory();\r\n\r\nconst transitionNavBar = () => {\r\n    if(window.scrollY > 100) {\r\n        handleShow(true);\r\n    }else{\r\n        handleShow(false);\r\n    }\r\n}\r\nuseEffect(() => {\r\n    window.addEventListener(\"scroll\",transitionNavBar);\r\n    return () => window.removeEventListener(\"scroll\",transitionNavBar);\r\n},[])\r\n\r\n    return (\r\n        <div className={`nav ${show && 'nav_black'}`}>\r\n            <div className=\"nav_contents\">\r\n                <img \r\n                    onClick={() => history.push(\"/\")}\r\n                    className=\"nav_logo\" \r\n                    src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" \r\n                    alt=\"\" />\r\n\r\n                <img \r\n                    onClick={() => history.push(\"/profile\")}\r\n                    className=\"nav_avatar\" \r\n                    src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" \r\n                    alt=\"\" \r\n                />\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","const API_KEY = \"796c6768e6549cae0c00a5b02043a867\"; \r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, {useState, useEffect} from 'react';\r\nimport './Banner.css'\r\nimport axios from './axios.js'\r\nimport requests from './Requests.js'\r\n\r\nfunction Banner() {\r\n\r\n    const [movie,setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length -1 )                     //generate a random number from the set from 0 to length-1\r\n                ]\r\n            )\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n    },[])\r\n\r\n    function truncate(string, n) {\r\n        return string?.length > n ? string.substr(0, n-1) + '...' : string;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\" style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition: \"center center\"\r\n        }}>\r\n\r\n        <div className=\"banner_contents\">\r\n            <h1 className=\"banner_title\"> {movie?.title || movie?.name || movie?.original_name} </h1>\r\n            <div className=\"banner_buttons\">\r\n                <button className=\"banner_button\">Play</button>\r\n                <button className=\"banner_button\">My list</button>\r\n            </div>\r\n            <h1 className=\"banner_description\">{truncate(movie?.overview,150)}</h1>\r\n        </div>\r\n        <div className=\"banner_fadebottom\" />   \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, {useState, useEffect} from 'react'\r\nimport './Row.css'\r\nimport axios from './axios.js'\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow=false }) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[fetchUrl])\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className = \"row_posters\">\r\n                 {movies.map(\r\n                    (movie) =>\r\n                     ((isLargeRow && movie.poster_path) ||\r\n                     (!isLargeRow && movie.backdrop_path)) && (\r\n                         <img\r\n                            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                            key={movie.id}\r\n                            src={`${base_url}${\r\n                                isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                            }`}\r\n                            alt={movie.name}\r\n                         />\r\n                     ))\r\n                 \r\n                 }\r\n        </div>\r\n            </div>\r\n           \r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport './HomeScreen.css'\r\nimport Nav from '../Nav.js'\r\nimport Banner from '../Banner.js'\r\nimport requests from '../Requests.js'\r\nimport Row from '../Row.js'\r\n\r\nfunction HomeScreen() {\r\n    return (\r\n        <div className=\"homeScreen\">\r\n\r\n            {/* Nav */}\r\n            <Nav /> \r\n\r\n            {/* Banner */}\r\n            <Banner />\r\n\r\n            {/* Row */}\r\n            <Row \r\n                title=\"NETFLIX ORIGINALS\"\r\n                fetchUrl={requests.fetchNetflixOriginals}\r\n                isLargeRow\r\n            />\r\n\r\n            <Row \r\n                title=\"Trending Now\"\r\n                fetchUrl={requests.fetchTopRated}\r\n            />\r\n\r\n            <Row\r\n                title=\"Action Movies\"\r\n                fetchUrl={requests.fetchActionMovies}\r\n            />\r\n\r\n            <Row\r\n                title=\"Comedy Movies\"\r\n                fetchUrl={requests.fetchComedyMovies} \r\n            />\r\n\r\n            <Row\r\n                title=\"Horror Movies\"\r\n                fetchUrl={requests.fetchHorrorMovies} \r\n            />\r\n\r\n            <Row\r\n                title=\"Romance Movies\"\r\n                fetchUrl={requests.fetchRomanceMovies} \r\n            />\r\n\r\n            <Row\r\n                title=\"Documentaries\"\r\n                fetchUrl={requests.fetchDocumentaries} \r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","import firebase from 'firebase';\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAv7pchkjR-lJ2OrhhGd5_e47JbaczjdiY\",\r\n  authDomain: \"netflix-clone-94674.firebaseapp.com\",\r\n  projectId: \"netflix-clone-94674\",\r\n  storageBucket: \"netflix-clone-94674.appspot.com\",\r\n  messagingSenderId: \"282445071836\",\r\n  appId: \"1:282445071836:web:4583a399fac27f34cdbb19\",\r\n  measurementId: \"G-FY0H7C753N\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);         // initialize the application from firebase app\r\nconst db = firebaseApp.firestore()                                 //connect to realtime db from firebase\r\nconst auth = firebase.auth()                                       // this is for authenticaton\r\n\r\nexport { auth }\r\nexport default db;","import React, { useRef } from 'react';\r\nimport { auth } from '../firebase'                                 // this import is from the local firebase file\r\nimport './SignUpScreen.css'\r\n\r\nfunction SignUpScreen() {\r\n\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n\r\n     const register = (e) => {\r\n         e.preventDefault();\r\n\r\n         auth.createUserWithEmailAndPassword(           //take the current username and password, then authenticate the user. if error print the message using alert box\r\n             emailRef.current.value,\r\n             passwordRef.current.value\r\n         ).then((authUser) => {\r\n            console.log(authUser);\r\n         }).catch(error => {\r\n             alert(error.message);\r\n         }) \r\n     }\r\n\r\n     const signIn = (e) => {                        // it wont refresh the entire page when line 33 gets triggered\r\n         e.preventDefault(); \r\n\r\n         auth.signInWithEmailAndPassword(\r\n             emailRef.current.value,\r\n             passwordRef.current.value\r\n         ).then((authUser) => {\r\n            console.log(authUser);\r\n         }).catch(error => {\r\n             alert(error.message);\r\n         }) \r\n     }\r\n\r\n    return (\r\n        <div className=\"signUpScreen\">\r\n            <form>\r\n                <h1> Sign In</h1>\r\n                <input ref={emailRef} placeholder=\"Email\" type=\"email\" />\r\n                <input ref={passwordRef} placeholder=\"Password\" type=\"password\" />\r\n                <button type='submit' onClick={signIn}>Sign In</button>\r\n\r\n                <h4>\r\n                    <span className='signUpScreen_gray'>New to Netflix? </span> \r\n                    <span className='signUpScreen_link' onClick={register}>Sign up now.</span>\r\n                </h4>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpScreen\r\n","import React, { useState, useEffect } from 'react'\r\nimport './LoginScreen.css'\r\nimport SignUpScreen from './SignUpScreen'\r\n\r\nfunction LoginScreen() {\r\n\r\n    const [signIn, setSignIn] = useState(false);\r\n\r\n    return (\r\n        <div className=\"loginScreen\">\r\n            <div class=\"loginScreen_background\">\r\n                <img \r\n                    className = \"loginScreen_logo\"\r\n                    src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" \r\n                    alt=\"\" \r\n                />\r\n                \r\n                <button\r\n                    onClick={() => setSignIn(true)} \r\n                    className=\"loginScreen_button\">\r\n                    Sign In\r\n                </button>\r\n\r\n                <div className=\"loginScreen_gradient\" />\r\n            </div>\r\n\r\n            <div className=\"loginScreen_body\">\r\n                {signIn ? (\r\n                    <SignUpScreen />\r\n                ) : (\r\n\r\n                    <>\r\n                    <h1>Unlimited movies, TV shows and more.</h1>\r\n                    <h2>Watch anywhere. Cancel anytime.</h2>\r\n                    <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\r\n\r\n                    <div className=\"loginScreen_input\">\r\n                        <form>\r\n                            <input type='email' placeholder=\"Email Address\" />\r\n                            <button \r\n                                onClick={() => setSignIn(true)} \r\n                                className=\"loginScreen_getStarted\">\r\n                            GET STARTED\r\n                        </button>\r\n                        </form>\r\n\r\n                        <br/><br/><br/><br/>\r\n                        <br/><br/><br/><br/>\r\n                        <h4> Designed By Sandeep Varma</h4>\r\n                    </div>\r\n                </>\r\n\r\n                )}\r\n                \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login : (state,action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout : (state) => {\r\n      state.user = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\n\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useEffect, useState } from 'react'\r\nimport db from '../firebase'\r\nimport './PlansScreen.css'\r\n\r\nfunction PlansScreen() {\r\n\r\n    const [products, setproducts] = useState([]) \r\n\r\n    useEffect(() => {\r\n        db.collection('products')\r\n        .where('active','==',true)\r\n        .get().then(querySnapshot => {\r\n            const products = {};\r\n            querySnapshot.forEach(async productDoc => {\r\n                products[productDoc.id] = productDoc.data();\r\n\r\n            })\r\n            setproducts(products)\r\n        });\r\n    },[])\r\n\r\n    console.log(products);\r\n\r\n    const loadCheckOut = async (price) => {\r\n        \r\n    };\r\n    \r\n\r\n    return (\r\n        <div className=\"plansScreen\">\r\n            {Object.entries(products).map(([productId, productData]) => {\r\n                return (\r\n                    \r\n                    \r\n\r\n                    <div className=\"plansScreen_plan\">\r\n                        <div className=\"plansScreen_info\">\r\n                           <h3> {productData.name} </h3> \r\n                           <h4> {productData.description} </h4>\r\n                           <h4> ₹{productData.price} </h4>\r\n                        </div>\r\n                        \r\n                        <button onClick={loadCheckOut(productData.price)}>\r\n                            Subscribe\r\n                        </button>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlansScreen\r\n","import React from 'react'\r\nimport './ProfileScreen.css'\r\nimport Nav from '../Nav.js'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from '../features/userSlice'\r\nimport { auth } from '../firebase'\r\nimport PlansScreen from './PlansScreen.js'\r\n\r\nfunction ProfileScreen() {\r\n\r\n    const user = useSelector(selectUser)\r\n\r\n    return (\r\n        <div className=\"profileScreen\">\r\n            <Nav />\r\n            <div className=\"profileScreen_body\">\r\n                <h1>Edit Profile</h1>\r\n                <div className=\"profileScreen_info\">\r\n                    <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"\" />\r\n                    <div className=\"profileScreen_details\">\r\n                        <h2>{user.email}</h2>\r\n                        <div className=\"profileScreen_plans\">\r\n                            <h3> Plans </h3>\r\n\r\n                            <PlansScreen />\r\n                            <button \r\n                                onClick={() => auth.signOut()} \r\n                                className=\"profileScreen_signOut\"\r\n                            > Sign Out </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport HomeScreen from './screens/HomeScreen';\r\nimport Login from './screens/LoginScreen'\r\nimport ProfileScreen from './screens/ProfileScreen'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport { auth } from './firebase'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { login, logout, selectUser } from './features/userSlice'\r\n\r\nfunction App() {\r\n\r\n  const user=useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {                             // this will check for any authentication state change in the application through use effect  // on subscribe will clean up the effect \r\n      if (userAuth){\r\n        //logged in\r\n        console.log(userAuth);\r\n        dispatch(login({\r\n          uid: userAuth.uid,\r\n          email : userAuth.email\r\n        }))                                                                 // dispatching a login event in order to carry it forard when browsing for a particular user\r\n      } else {\r\n        //logged out\r\n        dispatch(logout())                                                                  // it will reset the user back to null\r\n      }\r\n    })\r\n\r\n    return unsubscribe;                                                                    // when the effect and state cleans up run the unsunscribe function\r\n  },[dispatch])\r\n\r\n  return (\r\n    <div className=\"app\">\r\n       <Router>\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n\r\n        {!user ? (\r\n          <Login />\r\n        ) : (\r\n          \r\n        <Switch>\r\n          <Route path=\"/profile\">\r\n            <ProfileScreen />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n        )}\r\n    </Router>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}